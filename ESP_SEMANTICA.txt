DESCRIPCIÓN DE LA SEMÁNTICA:

programa ->         sec_dec_var cuerpo
    def eval_programa(arbol, estado):
        eval_sec_dec_var(arbol.hijos[0], estado)
        eval_cuerpo(arbol.hijos[1], estado)

sec_dec_var ->      var { dec_vars } | epsilon
    def eval_sec_dec_var(arbol, estado):
        if arbol.hijos:
            eval_dec_vars(arbol.hijos[2], estado)

dec_vars ->         id: tipo var_factor
    def eval_dec_vars(arbol, estado):
        tipo, tam = eval_tipo(arbol.hijos[2], estado)

        agregar_variable(estado, arbol.hijos[0].lexema, tipo, tam)

        eval_var_factor(arbol.hijos[3], estado)

var_factor ->       , dec_vars | epsilon
    def eval_var_factor(arbol, estado):
        if arbol.hijos:
            eval_dec_vars(arbol.hijos[1], estado)

tipo ->             real | array[exp_aritmetica]
    def eval_tipo(arbol, estado):
        tipo = ''
        tam = 0
        if arbol.hijos[0].lexema == 'real':
            tipo = 'real'
        else:
            tipo = 'array'
            tam = m.floor(eval_exp_aritmetica(arbol.hijos[2], estado))
        return tipo, tam

cuerpo ->           body { sec_sentencias }
    def eval_cuerpo(arbol, estado):
        eval_sec_sentencias(arbol.hijos[2], estado)

sec_sentencias ->   sentencia; sentencia_factor
    def eval_sec_sentencias(arbol, estado):
        eval_sentencia(arbol.hijos[0], estado)
        eval_sentencia_factor(arbol.hijos[2], estado)

sentencia_factor -> sec_sentencias | epsilon
    def eval_sentencia_factor(arbol, estado):
        if arbol.hijos:
            eval_sec_sentencias(arbol.hijos[0], estado)

sentencia ->        asignacion | lectura | escritura | si_ent_sino |
                        ciclo_while | ciclo_for
    def eval_sentencia(arbol, estado):
        hijo = arbol.hijos[0]

        if hijo.simbolo == 'asignacion':
            eval_asignacion(hijo, estado)
        elif hijo.simbolo == 'lectura':
            eval_lectura(hijo, estado)
        elif hijo.simbolo == 'escritura':
            eval_escritura(hijo, estado)
        elif hijo.simbolo == 'si_ent_sino':
            eval_si_ent_sino(hijo, estado)
        elif hijo.simbolo == 'ciclo_while':
            eval_ciclo_while(hijo, estado)
        else:
            eval_ciclo_for(hijo, estado)

asignacion ->       id asig_factor
    def eval_asignacion(arbol, estado):
        eval_asig_factor(arbol.hijos[1], estado, arbol.hijos[0].lexema)

asig_factor ->      = valor_asignado | [exp_aritmetica] = exp_aritmetica
    def eval_asig_factor(arbol, estado, nombre_id):
        indice = -1
        if arbol.hijos[0].lexema == '[':
            indice = m.floor(eval_exp_aritmetica(arbol.hijos[1], estado))
            valor = eval_exp_aritmetica(arbol.hijos[4], estado)
        else:
            valor = eval_valor_asignado(arbol.hijos[1], estado)

        asignar_valor(estado, nombre_id, valor, indice)

valor_asignado ->   exp_aritmetica | arreglo
    def eval_valor_asignado(arbol, estado):
        hijo = arbol.hijos[0]

        if hijo.simbolo == 'exp_aritmetica':
            valor_asignado = eval_exp_aritmetica(hijo, estado)
        else:
            valor_asignado = eval_arreglo(hijo, estado)
        return valor_asignado

arreglo ->          [elementos_array]
    def eval_arreglo(arbol, estado):
        array = []
        eval_elementos_array(arbol.hijos[1], estado, array)
        return array

exp_aritmetica ->   producto arit_factor
    def eval_exp_aritmetica(arbol, estado):
        operando1 = eval_producto(arbol.hijos[0], estado)
        resultado = eval_arit_factor(arbol.hijos[1], estado, operando1)
        return resultado

arit_factor ->      + exp_aritmetica | - exp_aritmetica | epsilon
    def eval_arit_factor(arbol, estado, operando1):

        if arbol.hijos:
            primer_hijo = arbol.hijos[0]

            if primer_hijo.lexema == '+':
                operando2 = eval_exp_aritmetica(arbol.hijos[1], estado)
                resultado = operando1 + operando2
            elif primer_hijo.lexema == '-':
                operando2 = eval_exp_aritmetica(arbol.hijos[1], estado)
                resultado = operando1 - operando2
        else:
            resultado = operando1
        
        return resultado

producto ->         numero prod_factor 
    def eval_producto(arbol, estado):


        operando1 = eval_numero(arbol.hijos[0], estado)
        resultado = eval_prod_factor(arbol.hijos[1], estado, operando1)
        return resultado

prod_factor ->      * producto | / producto | epsilon
    def eval_prod_factor(arbol, estado, operando1):
        if arbol.hijos:
            primer_hijo = arbol.hijos[0]
            if primer_hijo.simbolo == '*':
                operando2 = eval_producto(arbol.hijos[1], estado)
                resultado = operando1 * operando2
            elif primer_hijo.simbolo == '/':
                operando2 = eval_producto(arbol.hijos[1], estado)
                resultado = operando1 / operando2
        else:
            resultado = operando1
        return resultado

numero ->           id id_factor | const_real | (exp_aritmetica) | -numero | pow(exp_aritmetica, exp_aritmetica) | root(exp_aritmetica, exp_aritmetica)
    def eval_numero(arbol, estado):
        hijo = arbol.hijos[0]

        if hijo.simbolo == 'id':
            resultado = eval_id_factor(arbol.hijos[1], estado, hijo.lexema)
        elif hijo.simbolo == 'const_real':
            resultado = float(hijo.lexema)
        elif hijo.simbolo == '(':
            resultado = eval_exp_aritmetica(arbol.hijos[1], estado)
        elif hijo.simbolo == '-':
            resultado = -(eval_exp_aritmetica(arbol.hijos[1], estado))
        elif hijo.simbolo == 'pow':
            base = eval_exp_aritmetica(arbol.hijos[2], estado)
            exponente = eval_exp_aritmetica(arbol.hijos[4], estado)
            resultado = base ** exponente
        else:
            #root
            base = eval_exp_aritmetica(arbol.hijos[2], estado)
            exponente = eval_exp_aritmetica(arbol.hijos[4], estado)
            resultado = base ** (1/exponente)
        
        return resultado

id_factor ->        [exp_aritmetica] | epsilon
    def eval_id_factor(arbol, estado, nombre_id):
        if arbol.hijos:
            pos = m.floor(eval_exp_aritmetica(arbol.hijos[1], estado))
            resultado = obtener_valor(estado, nombre_id, pos)
        else:
            resultado = obtener_valor(estado, nombre_id)
        return resultado

elementos_array ->  exp_aritmetica array_factor
    def eval_elementos_array(arbol, estado, array):
        array.append(eval_exp_aritmetica(arbol.hijos[0], estado))
        eval_array_factor(arbol.hijos[1], estado, array)

array_factor ->     , elementos_array | epsilon
    def eval_array_factor(arbol, estado, array):
        if arbol.hijos:
            eval_elementos_array(arbol.hijos[1], estado, array)

lectura ->          read(cadena, id)
    def eval_lectura(arbol, estado):
        cadena = arbol.hijos[2].lexema
        nombre_id = arbol.hijos[4].lexema

        print

        valor = input(cadena)
        asignar_valor(estado, nombre_id, valor, -1)

escritura ->        write(args_escribir)
    def eval_escritura(arbol, estado):
        eval_args_escribir(arbol.hijos[2], estado)
        print('')

args_escribir ->    arg_escribir args_esc_factor
    def eval_args_escribir(arbol, estado):
        eval_arg_escribir(arbol.hijos[0], estado)
        eval_args_esc_factor(arbol.hijos[1], estado)

args_esc_factor ->  , args_escribir | epsilon
    def eval_args_esc_factor(arbol, estado):
        if arbol.hijos:
            eval_args_escribir(arbol.hijos[1], estado)

arg_escribir ->     cadena | exp_aritmetica | arreglo
    def eval_arg_escribir(arbol, estado):
        hijo = arbol.hijos[0]

        if hijo.simbolo == 'cadena':
            print(hijo.lexema, end=' ')
        elif hijo.simbolo == 'exp_aritmetica':
            print(eval_exp_aritmetica(hijo,estado), end=' ')
        else:
            print(eval_arreglo(hijo, estado), end=' ')

si_ent_sino ->      if condicion { sec_sentencias } sino
    def eval_si_ent_sino(arbol, estado):
        if eval_condicion(arbol.hijos[1], estado):
            eval_sec_sentencias(arbol.hijos[3], estado)
        else:
            eval_sino(arbol.hijos[5], estado)

sino ->             else { sec_sentencias } | epsilon
    def eval_sino(arbol, estado):
        if arbol.hijos:
            eval_sec_sentencias(arbol.hijos[2], estado)

condicion ->        conjuncion cond_or
    def eval_condicion(arbol, estado):
        operador1 = eval_conjuncion(arbol.hijos[0], estado)
        resultado = eval_cond_or(arbol.hijos[1], estado, operador1)
        return resultado

cond_or ->          or condicion | epsilon
    def eval_cond_or(arbol, estado, operador1):
        if arbol.hijos:
            operador2 = eval_condicion(arbol.hijos[1], estado)
            resultado = operador1 or operador2
        else:
            resultado = operador1
        return resultado

conjuncion ->       exp_relacional cond_and
    def eval_conjuncion(arbol, estado):
        operador1 = eval_exp_relacional(arbol.hijos[0], estado)
        resultado = eval_cond_and(arbol.hijos[1], estado, operador1)
        return resultado

cond_and ->         and conjuncion | epsilon
    def eval_cond_and(arbol, estado, operador1):
        if arbol.hijos:
            operador2 = eval_condicion(arbol.hijos[1], estado)
            resultado = operador1 and operador2
        else:
            resultado = operador1
        return resultado

exp_relacional ->   exp_aritmetica operador_relacional exp_aritmetica | not exp_relacional | {condicion}
    def eval_exp_relacional(arbol, estado):
        hijo = arbol.hijos[0]

        if hijo.lexema == '{':
            resultado = eval_condicion(arbol.hijos[1], estado)
        elif hijo.lexema == 'not':
            resultado = not(eval_exp_relacional(arbol.hijos[1], estado))
        else:
            exp1 = eval_exp_aritmetica(arbol.hijos[0], estado)
            exp2 = eval_exp_aritmetica(arbol.hijos[2], estado)
            op = arbol.hijos[1].lexema

            if op == '>':
                resultado = exp1 > exp2
            elif op == '<':
                resultado = exp1 < exp2
            elif op == '>=':
                resultado = exp1 >= exp2
            elif op == '<=':
                resultado = exp1 <= exp2
            else:
                resultado = exp1 == exp2
        
        return resultado

ciclo_while ->      while condicion { sec_sentencias }
    def eval_ciclo_while(arbol, estado):
        while (eval_condicion(arbol.hijos[1], estado)):
            eval_sec_sentencias(arbol.hijos[3], estado)

ciclo_for ->        for id from exp_aritmetica to exp_aritmetica { sec_sentencias }
    def eval_ciclo_for(arbol, estado):
        inicio = m.floor(eval_exp_aritmetica(arbol.hijos[3], estado))
        fin = m.floor(eval_exp_aritmetica(arbol.hijos[5], estado))
        step = 1

        if inicio > fin:
            step = -1

        for aux in range(inicio, fin, step):
            asignar_valor(estado, arbol.hijos[1].lexema, aux, -1)
            eval_sec_sentencias(arbol.hijos[7], estado)